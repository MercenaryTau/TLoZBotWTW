#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_shading_language_packing : enable
// shader aa9b23424e08a325
uniform ivec4 uf_remappedVS[5];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem1;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder.xyzw = uvec4(attrDataSem0.x,0,0,0);
R1i = ivec4(int(attrDecoder.x), 0, 0, 1);
attrDecoder.xy = attrDataSem1.xy;
attrDecoder.xy = ((attrDecoder.xy>>8)&0xFF)|((attrDecoder.xy<<8)&0xFF00);
attrDecoder.z = 0;
attrDecoder.w = 0;
attrDecoder.xy = floatBitsToUint(unpackHalf2x16(attrDecoder.x|(attrDecoder.y<<16)));
attrDecoder.zw = uvec2(0);
R2i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
backupReg0i = R1i.x;
R1i.x = 0;
R1i.y = 0;
R127i.z = 0;
PV0i.z = R127i.z;
R127i.w = 0x3f800000;
PV0i.w = R127i.w;
R0i.w = (backupReg0i == 0)?int(0xFFFFFFFF):int(0x0);
PS0i = R0i.w;
// 1
R4i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.w)),vec4(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].z),intBitsToFloat(uf_remappedVS[0].w))));
PV1i.x = R4i.x;
PV1i.y = R4i.x;
PV1i.z = R4i.x;
PV1i.w = R4i.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R127i.z),intBitsToFloat(R127i.w)),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),intBitsToFloat(uf_remappedVS[1].z),intBitsToFloat(uf_remappedVS[1].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R4i.y = tempi.x;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R127i.z),intBitsToFloat(R127i.w)),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),intBitsToFloat(uf_remappedVS[2].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R4i.z = tempi.x;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R127i.z),intBitsToFloat(R127i.w)),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R4i.w = tempi.x;
// 5
predResult = (R0i.w == 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R1i.x = 0;
R1i.y = 0;
R126i.w = floatBitsToInt(float(R0i.x));
PS0i = R126i.w;
// 1
R2i.x = 0x3f800000;
R127i.y = floatBitsToInt(abs(intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(abs(intBitsToFloat(PS0i)));
PV1i.z = floatBitsToInt(intBitsToFloat(PV1i.z) / 2.0);
PV1i.w = floatBitsToInt(abs(intBitsToFloat(PS0i)) * 0.25);
R127i.x = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedVS[4].x));
PS1i = R127i.x;
// 2
PV0i.x = floatBitsToInt(trunc(intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(trunc(intBitsToFloat(PV1i.w)));
// 3
backupReg0i = R127i.y;
backupReg0i = R127i.y;
R127i.y = floatBitsToInt((-(intBitsToFloat(PV0i.z)) * 4.0 + intBitsToFloat(backupReg0i)));
PV1i.y = R127i.y;
R127i.w = floatBitsToInt((-(intBitsToFloat(PV0i.x)) * 2.0 + intBitsToFloat(backupReg0i)));
PV1i.w = R127i.w;
// 4
PV0i.x = floatBitsToInt((intBitsToFloat(PV1i.w) >= 2.0)?1.0:0.0);
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.y) + intBitsToFloat(0xc0800000));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(0xc0000000));
PV0i.w = floatBitsToInt((intBitsToFloat(PV1i.y) >= 4.0)?1.0:0.0);
// 5
backupReg0i = R127i.y;
R127i.y = ((intBitsToFloat(PV0i.x) == 0.0)?(R127i.w):(PV0i.z));
PV1i.y = R127i.y;
R127i.z = ((intBitsToFloat(PV0i.w) == 0.0)?(backupReg0i):(PV0i.y));
PV1i.z = R127i.z;
// 6
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.z) + 4.0);
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.y) + 2.0);
// 7
R123i.x = ((-(intBitsToFloat(R127i.z)) > 0.0)?(PV0i.y):(R127i.z));
PV1i.x = R123i.x;
R123i.z = ((-(intBitsToFloat(R127i.y)) > 0.0)?(PV0i.w):(R127i.y));
PV1i.z = R123i.z;
// 8
backupReg0i = R126i.w;
R123i.x = ((-(intBitsToFloat(R126i.w)) > 0.0)?(floatBitsToInt(-(intBitsToFloat(PV1i.z)))):(PV1i.z));
PV0i.x = R123i.x;
R126i.w = ((-(intBitsToFloat(backupReg0i)) > 0.0)?(floatBitsToInt(-(intBitsToFloat(PV1i.x)))):(PV1i.x));
// 9
PS1i = int(intBitsToFloat(PV0i.x));
// 10
PV0i.w = R0i.x - PS1i;
PS0i = int(intBitsToFloat(R126i.w));
// 11
PV1i.y = (PS0i == int(1))?int(0xFFFFFFFF):int(0x0);
PV1i.w = (PS0i == 0x00000002)?int(0xFFFFFFFF):int(0x0);
R127i.z = floatBitsToInt(float(PV0i.w));
PS1i = R127i.z;
// 12
PV0i.x = floatBitsToInt((intBitsToFloat(PS1i) > 0.0)?1.0:0.0);
PV0i.y = floatBitsToInt((0.0 > intBitsToFloat(PS1i))?1.0:0.0);
R123i.z = ((PV1i.y == 0)?(PV1i.w):(int(-1)));
PV0i.z = R123i.z;
// 13
R3i.x = ((PV0i.z == 0)?(R2i.x):(R1i.x));
R3i.y = ((PV0i.z == 0)?(R2i.y):(R1i.y));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + -(intBitsToFloat(PV0i.y)));
// 14
R123i.z = floatBitsToInt((intBitsToFloat(PV1i.w) * 0.5 + intBitsToFloat(R127i.z)));
PV0i.z = R123i.z;
// 15
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.z) * 0.5);
// 16
PV0i.y = floatBitsToInt(trunc(intBitsToFloat(PV1i.x)));
// 17
PS1i = int(intBitsToFloat(PV0i.y));
// 18
PS0i = floatBitsToInt(float(PS1i));
// 19
PV1i.y = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(R127i.x));
PV1i.y = floatBitsToInt(intBitsToFloat(PV1i.y) / 2.0);
// 20
R1i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + 0.5);
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
// export
float origRatio = 1.777f;
float newRatio = 5.333f;
gl_Position = vec4(intBitsToFloat(R4i.x) * (origRatio / newRatio), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
// export
// skipped export to semanticId 255
// export
passParameterSem1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.y), intBitsToFloat(R1i.x));
}
